{"ast":null,"code":"/* import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"authToken\");\n\n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    // If token does not exist or is invalid, handle accordingly\n    // For example, redirect the user to the login page\n    window.location.href = \"/login\"; // Redirect to login page\n  }\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    error: null,\n    isLoading: false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const authToken = getAuthToken();\n    const response = await axios.post(\n      \"http://localhost:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${authToken}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\", // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\n\nexport default authSlice.reducer;\n */\n\n/* import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n\n  // If token is found, return it\n  return token;\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    error: null,\n    isLoading: false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n      localStorage.removeItem(\"token\"); // Remove token from local storage on logout\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n      localStorage.setItem(\"token\", action.payload.token); // Store token in local storage on successful registration\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },    \n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n  },}\n\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken, \n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    dispatch(setCsrfToken(response.headers['x-csrf-token'])); // Store CSRF token\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = localStorage.getItem(\"csrfToken\");\n    const response = await axios.post(\n      \"http://localhost:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${getAuthToken()}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\", // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data));\n    dispatch(setCsrfToken(response.headers['x-csrf-token'])); // Store CSRF token\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\n\nexport default authSlice.reducer;\n */","map":{"version":3,"names":[],"sources":["/home/chiragramnani/Desktop/project/full-stack-crud/client/src/features/auth/authSlice.js"],"sourcesContent":["/* import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"authToken\");\n\n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    // If token does not exist or is invalid, handle accordingly\n    // For example, redirect the user to the login page\n    window.location.href = \"/login\"; // Redirect to login page\n  }\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    error: null,\n    isLoading: false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const authToken = getAuthToken();\n    const response = await axios.post(\n      \"http://localhost:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${authToken}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\", // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\n\nexport default authSlice.reducer;\n */\n\n/* import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n\n  // If token is found, return it\n  return token;\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    error: null,\n    isLoading: false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n      localStorage.removeItem(\"token\"); // Remove token from local storage on logout\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n      localStorage.setItem(\"token\", action.payload.token); // Store token in local storage on successful registration\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },    \n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n  },}\n\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken, \n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    dispatch(setCsrfToken(response.headers['x-csrf-token'])); // Store CSRF token\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = localStorage.getItem(\"csrfToken\");\n    const response = await axios.post(\n      \"http://localhost:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${getAuthToken()}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\", // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data));\n    dispatch(setCsrfToken(response.headers['x-csrf-token'])); // Store CSRF token\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\n\nexport default authSlice.reducer;\n */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}