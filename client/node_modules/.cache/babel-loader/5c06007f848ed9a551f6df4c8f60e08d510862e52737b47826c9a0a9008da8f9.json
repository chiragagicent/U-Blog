{"ast":null,"code":"// authSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n\n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    return null;\n  }\n}\n\n/* const [token,_setToken] = useState(localStorage.getItem(\"token\"));\nconst setToken=(token)=>{\n  if(token){\n    localStorage.setItem(\"token\",token);\n  }\n  else{\n    localStorage.removeItem(\"token\");\n  }\n} */\n// Function to retrieve and store CSRF token\nfunction getCsrfToken() {\n  return axios.get(\"http://localhost:8000/api/csrf-token\").then(response => response.data.csrfToken).catch(error => {\n    console.error(\"Failed to retrieve CSRF token:\", error);\n    return null;\n  });\n}\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    name: null,\n    email: null,\n    password: null,\n    role: null,\n    token: localStorage.getItem(\"token\"),\n    csrfToken: null,\n    error: null,\n    isLoading: false,\n    isLoggedIn: localStorage.getItem(\"token\") ? true : false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.name = action.payload.user.name;\n      state.role = action.payload.user.role;\n      state.token = action.payload.token;\n      state.isLoggedIn = true; // Update isLoggedIn to true on successful login\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      const token = localStorage.getItem(\"token\");\n      console.log(token);\n      if (!!token) {\n        window.location.href = \"/login\";\n      }\n    },\n    logout: state => {\n      state.name = null;\n      state.email = null;\n      state.password = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n      state.isLoggedIn = false;\n      localStorage.removeItem(\"token\");\n    },\n    registerStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.name = action.payload.user.name;\n      state.email = action.payload.user.email;\n      state.password = action.payload.user.password;\n      state.role = action.payload.user.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async dispatch => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/login\", {\n      email,\n      password\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n    localStorage.setItem(\"role\", response.data.role);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async dispatch => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = await getCsrfToken();\n    const authToken = getAuthToken();\n    const response = await axios.post(\"http://127.0.0.1:8000/api/register\", {\n      name,\n      email,\n      password,\n      role\n    }, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        // Include authentication token in request headers\n        \"Content-Type\": \"application/json\",\n        \"X-CSRF-TOKEN\": csrfToken // Set appropriate content type\n      }\n    });\n    dispatch(registerSuccess(response.data.user));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\nexport const selectUser = state => state.auth.user;\nexport const selectRole = state => state.auth.role;\nexport const selectToken = state => state.auth.token;\nexport const selectCsrfToken = state => state.auth.csrfToken;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn; // Add selector for isLoggedIn\n\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","axios","getAuthToken","token","localStorage","getItem","getCsrfToken","get","then","response","data","csrfToken","catch","error","console","authSlice","name","initialState","email","password","role","isLoading","isLoggedIn","reducers","loginStart","state","loginSuccess","action","payload","user","loginFailure","log","window","location","href","logout","removeItem","registerStart","registerSuccess","registerFailure","setCsrfToken","actions","login","dispatch","post","setItem","message","register","authToken","headers","Authorization","selectUser","auth","selectRole","selectToken","selectCsrfToken","selectIsLoggedIn","reducer"],"sources":["/home/chiragramnani/Desktop/project/full-stack-crud/client/src/features/auth/authSlice.js"],"sourcesContent":["// authSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n  \n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    return null;    \n  }\n}\n\n/* const [token,_setToken] = useState(localStorage.getItem(\"token\"));\nconst setToken=(token)=>{\n  if(token){\n    localStorage.setItem(\"token\",token);\n  }\n  else{\n    localStorage.removeItem(\"token\");\n  }\n} */\n// Function to retrieve and store CSRF token\nfunction getCsrfToken() {\n  return axios\n    .get(\"http://localhost:8000/api/csrf-token\")\n    .then((response) => response.data.csrfToken)\n    .catch((error) => {\n      console.error(\"Failed to retrieve CSRF token:\", error);\n      return null;\n    });\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    name: null,\n    email: null,\n    password: null,\n    role: null,\n    token: localStorage.getItem(\"token\"),\n    csrfToken: null,\n    error: null,\n    isLoading: false,\n    isLoggedIn: localStorage.getItem(\"token\")?true:false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.name = action.payload.user.name;\n      state.role = action.payload.user.role;\n      state.token = action.payload.token;\n      state.isLoggedIn = true; // Update isLoggedIn to true on successful login\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      const token = localStorage.getItem(\"token\");\n      console.log(token);\n      if(!!token)\n      {window.location.href = \"/login\";}\n    },\n    logout: (state) => {\n      state.name = null;\n      state.email = null;\n      state.password = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n      state.isLoggedIn = false;\n      localStorage.removeItem(\"token\");\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.name = action.payload.user.name;\n      state.email = action.payload.user.email;\n      state.password = action.payload.user.password;\n      state.role = action.payload.user.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n    },\n  },\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken,\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n    localStorage.setItem(\"role\",response.data.role);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = await getCsrfToken();\n    const authToken = getAuthToken();\n    const response = await axios.post(\n      \"http://127.0.0.1:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${authToken}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\",\n          \"X-CSRF-TOKEN\": csrfToken, // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data.user));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\nexport const selectCsrfToken = (state) => state.auth.csrfToken;\nexport const selectIsLoggedIn = (state) => state.auth.isLoggedIn; // Add selector for isLoggedIn\n\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}