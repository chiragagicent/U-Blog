{"ast":null,"code":"/* import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchPosts,\n  selectPosts,\n  deletePost,\n  addPost as addPostAction,\n  updatePost as updatePostAction,\n} from \"../features/posts/postsSlice\";\n\nconst UserDashboard = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(selectPosts);\n  const [formData, setFormData] = useState({ title: \"\", content: \"\" });\n  const [editingPostId, setEditingPostId] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  const handleDelete = (postId) => {\n    dispatch(deletePost(postId));\n  };\n\n  const handleAddPost = () => {\n    dispatch(addPostAction(formData.title, formData.content));\n    setFormData({ title: \"\", content: \"\" });\n  };\n\n  const handleUpdatePost = (postId) => {\n    const postToUpdate = posts.find((post) => post.id === postId);\n    if (postToUpdate) {\n      setFormData({ title: postToUpdate.title, content: postToUpdate.content });\n    }\n    setEditingPostId(postId);\n  };\n\n  const handleFormChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updatePostAction(editingPostId, formData));\n    setFormData({ title: \"\", content: \"\" });\n    setEditingPostId(null);\n  };\n\n  const handleCancelEdit = () => {\n    setFormData({ title: \"\", content: \"\" });\n    setEditingPostId(null);\n  };\n\n  return (\n    <div>\n      <h2>User Dashboard</h2>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={formData.title}\n          name=\"title\"\n          onChange={handleFormChange}\n          disabled={editingPostId !== null}\n        />\n        <textarea\n          placeholder=\"Content\"\n          value={formData.content}\n          name=\"content\"\n          onChange={handleFormChange}\n          disabled={editingPostId !== null}\n        ></textarea>\n        <button onClick={handleAddPost} disabled={editingPostId !== null}>\n          Add Post\n        </button>\n      </div>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.content}</p>\n            {editingPostId === post.id ? (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  value={formData.title}\n                  name=\"title\"\n                  onChange={handleFormChange}\n                />\n                <textarea\n                  placeholder=\"Content\"\n                  value={formData.content}\n                  name=\"content\"\n                  onChange={handleFormChange}\n                ></textarea>\n                <button type=\"submit\">Update</button>\n                <button type=\"button\" onClick={handleCancelEdit}>\n                  Cancel\n                </button>\n              </form>\n            ) : (\n              <>\n                <button onClick={() => handleUpdatePost(post.id)}>\n                  Edit Post\n                </button>\n                <button onClick={() => handleDelete(post.id)}>\n                  Delete Post\n                </button>\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UserDashboard;\n */","map":{"version":3,"names":[],"sources":["/home/chiragramnani/Desktop/project/full-stack-crud/client/src/components/UserDashboard.js"],"sourcesContent":["/* import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchPosts,\n  selectPosts,\n  deletePost,\n  addPost as addPostAction,\n  updatePost as updatePostAction,\n} from \"../features/posts/postsSlice\";\n\nconst UserDashboard = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(selectPosts);\n  const [formData, setFormData] = useState({ title: \"\", content: \"\" });\n  const [editingPostId, setEditingPostId] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  const handleDelete = (postId) => {\n    dispatch(deletePost(postId));\n  };\n\n  const handleAddPost = () => {\n    dispatch(addPostAction(formData.title, formData.content));\n    setFormData({ title: \"\", content: \"\" });\n  };\n\n  const handleUpdatePost = (postId) => {\n    const postToUpdate = posts.find((post) => post.id === postId);\n    if (postToUpdate) {\n      setFormData({ title: postToUpdate.title, content: postToUpdate.content });\n    }\n    setEditingPostId(postId);\n  };\n\n  const handleFormChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    dispatch(updatePostAction(editingPostId, formData));\n    setFormData({ title: \"\", content: \"\" });\n    setEditingPostId(null);\n  };\n\n  const handleCancelEdit = () => {\n    setFormData({ title: \"\", content: \"\" });\n    setEditingPostId(null);\n  };\n\n  return (\n    <div>\n      <h2>User Dashboard</h2>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={formData.title}\n          name=\"title\"\n          onChange={handleFormChange}\n          disabled={editingPostId !== null}\n        />\n        <textarea\n          placeholder=\"Content\"\n          value={formData.content}\n          name=\"content\"\n          onChange={handleFormChange}\n          disabled={editingPostId !== null}\n        ></textarea>\n        <button onClick={handleAddPost} disabled={editingPostId !== null}>\n          Add Post\n        </button>\n      </div>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            <h3>{post.title}</h3>\n            <p>{post.content}</p>\n            {editingPostId === post.id ? (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  type=\"text\"\n                  placeholder=\"Title\"\n                  value={formData.title}\n                  name=\"title\"\n                  onChange={handleFormChange}\n                />\n                <textarea\n                  placeholder=\"Content\"\n                  value={formData.content}\n                  name=\"content\"\n                  onChange={handleFormChange}\n                ></textarea>\n                <button type=\"submit\">Update</button>\n                <button type=\"button\" onClick={handleCancelEdit}>\n                  Cancel\n                </button>\n              </form>\n            ) : (\n              <>\n                <button onClick={() => handleUpdatePost(post.id)}>\n                  Edit Post\n                </button>\n                <button onClick={() => handleDelete(post.id)}>\n                  Delete Post\n                </button>\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UserDashboard;\n */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}