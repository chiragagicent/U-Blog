{"ast":null,"code":"// authSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n  console.log(token);\n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    // If token does not exist or is invalid, handle accordingly\n    // For example, redirect the user to the login page\n    window.location.href = \"/login\"; // Redirect to login page\n  }\n}\n\n// Function to retrieve and store CSRF token\nfunction getCsrfToken() {\n  return axios.get(\"http://localhost:8000/api/csrf-token\").then(response => response.data.csrfToken).catch(error => {\n    console.error(\"Failed to retrieve CSRF token:\", error);\n    return null;\n  });\n}\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    csrfToken: null,\n    error: null,\n    isLoading: false\n  },\n  reducers: {\n    loginStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n    },\n    registerStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async dispatch => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async dispatch => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = await getCsrfToken();\n    const authToken = getAuthToken();\n    const response = await axios.post(\"http://localhost:8000/api/register\", {\n      name,\n      email,\n      password,\n      role\n    },\n    /*       {\n      withCredentials: true,\n      credentials:  \"include\",\n    } , */\n    {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        // Include authentication token in request headers\n        \"Content-Type\": \"application/json\",\n        \"X-CSRF-TOKEN\": csrfToken // Set appropriate content type\n      }\n    });\n    dispatch(registerSuccess(response.data));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\nexport const selectUser = state => state.auth.user;\nexport const selectRole = state => state.auth.role;\nexport const selectToken = state => state.auth.token;\nexport const selectCsrfToken = state => state.auth.csrfToken;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","axios","getAuthToken","token","localStorage","getItem","console","log","window","location","href","getCsrfToken","get","then","response","data","csrfToken","catch","error","authSlice","name","initialState","user","role","isLoading","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","registerStart","registerSuccess","registerFailure","setCsrfToken","actions","login","email","password","dispatch","post","setItem","message","register","authToken","headers","Authorization","selectUser","auth","selectRole","selectToken","selectCsrfToken","reducer"],"sources":["/home/chiragramnani/Desktop/project/full-stack-crud/client/src/features/auth/authSlice.js"],"sourcesContent":["// authSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Function to retrieve authentication token from storage\nfunction getAuthToken() {\n  // Check if token exists in localStorage\n  const token = localStorage.getItem(\"token\");\n  console.log(token);\n  // If token is found, return it\n  if (token) {\n    return token;\n  } else {\n    // If token does not exist or is invalid, handle accordingly\n    // For example, redirect the user to the login page\n    window.location.href = \"/login\"; // Redirect to login page\n  }\n}\n\n// Function to retrieve and store CSRF token\nfunction getCsrfToken() {\n  return axios\n    .get(\"http://localhost:8000/api/csrf-token\")\n    .then((response) => response.data.csrfToken)\n    .catch((error) => {\n      console.error(\"Failed to retrieve CSRF token:\", error);\n      return null;\n    });\n}\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    role: null,\n    token: null,\n    csrfToken: null,\n    error: null,\n    isLoading: false,\n  },\n  reducers: {\n    loginStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    loginFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.role = null;\n      state.token = null;\n      state.error = null;\n    },\n    registerStart: (state) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.role = action.payload.role;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    setCsrfToken: (state, action) => {\n      state.csrfToken = action.payload;\n    },\n  },\n});\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  setCsrfToken,\n} = authSlice.actions;\n\n// Async action to log in a user\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(loginStart());\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/login\", {\n      email,\n      password,\n    });\n    dispatch(loginSuccess(response.data));\n    localStorage.setItem(\"token\", response.data.token);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\n\n// Async action to register a user\nexport const register = (name, email, password, role) => async (dispatch) => {\n  dispatch(registerStart());\n  try {\n    const csrfToken = await getCsrfToken();\n    const authToken = getAuthToken();\n    const response = await axios.post(\n      \"http://localhost:8000/api/register\",\n      {\n        name,\n        email,\n        password,\n        role,\n      },\n      /*       {\n        withCredentials: true,\n        credentials:  \"include\",\n      } , */\n      {\n        headers: {\n          Authorization: `Bearer ${authToken}`, // Include authentication token in request headers\n          \"Content-Type\": \"application/json\",\n          \"X-CSRF-TOKEN\": csrfToken, // Set appropriate content type\n        },\n      }\n    );\n    dispatch(registerSuccess(response.data));\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectRole = (state) => state.auth.role;\nexport const selectToken = (state) => state.auth.token;\nexport const selectCsrfToken = (state) => state.auth.csrfToken;\n\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}